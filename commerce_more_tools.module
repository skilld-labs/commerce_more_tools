<?php

/**
 * @file
 * Common hook implementations for commerce_more_tools module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\commerce_more_tools\Form\StoreForm;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;

/**
 * Implements hook_ENTITY_TYPE_access().
 *
 * Used to control access to product variations.
 */
function commerce_more_tools_commerce_product_variation_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($account->id() == $entity->getProduct()->getOwnerId() && $operation != 'view') {
    $variation_type_id = $entity->bundle();
    switch ($operation) {
      case 'create':
        return AccessResult::allowedIfHasPermission($account, "own product create $variation_type_id product_variation");

      case 'update':
        return AccessResult::allowedIfHasPermission($account, "own product edit own $variation_type_id product_variation")
          ->orIf(AccessResult::allowedIfHasPermission($account, "own product edit any $variation_type_id product_variation"));

      case 'delete':
        return AccessResult::allowedIfHasPermission($account, "own product delete own $variation_type_id product_variation")
          ->orIf(AccessResult::allowedIfHasPermission($account, "own product delete any $variation_type_id product_variation"));

      case 'duplicate':
        return AccessResult::allowedIfHasPermission($account, "own product duplicate $variation_type_id product_variation");

      default:
        return AccessResult::forbidden();
    }
  }
  else {
    return AccessResult::neutral();
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 *
 * Used to control access to commerce orders.
 */
function commerce_more_tools_commerce_order_access(EntityInterface $entity, $operation, AccountInterface $account) {
  // Seems there's a bug in upstream. Let's check store before any operation.
  if ($store = $entity->getStore()) {
    if ($store->getOwner()->id() == $account->id()) {
      $order_type = $entity->bundle();
      switch ($operation) {
        case 'view':
          return AccessResult::allowedIfHasPermission($account, "own store view order type $order_type");

        case 'update':
          return AccessResult::allowedIfHasPermission($account, "own store edit order type $order_type");

        case 'delete':
          return AccessResult::allowedIfHasPermission($account, "own store delete order type $order_type");
      }
    }
  }
  else {
    return AccessResult::neutral();
  }
}

/**
 * Implements hook_entity_operation().
 */
function commerce_more_tools_entity_operation(EntityInterface $entity) {
  if ($entity->getEntityTypeId() === 'commerce_order') {
    $operations = [];
    // Needed variables.
    $store_owner = $entity->getStore()->getOwner();
    $current_user = \Drupal::currentUser();
    // Let's validate several cases for desired operations.
    if ($store_owner->id() == $current_user->id() && $current_user->hasPermission('own store manage payments')) {
      $operations['payments'] = [
        'title' => t('Payments'),
        'url' => Url::fromRoute('entity.commerce_payment.collection', [
          'commerce_order' => $entity->id(),
        ]),
        'weight' => 50,
      ];
    }
    if (($store_owner->id() == $current_user->id() && $current_user->hasPermission('own store manage payments')) || $current_user->hasPermission('administer commerce_payment')) {
      $operations['payment_create'] = [
        'title' => t('Add payment'),
        'url' => Url::fromRoute('entity.commerce_payment.add_form', [
          'commerce_order' => $entity->id(),
        ]),
        'weight' => 55,
      ];
    }
    return $operations;
  }
}

/**
 * Implements hook_entity_operation_alter().
 */
function commerce_more_tools_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if ($entity->getEntityTypeId() === 'commerce_order' && $entity->getStore()->getOwner()->id() == \Drupal::currentUser()->id()) {
    $order_type = $entity->bundle();
    if (!\Drupal::currentUser()->hasPermission("own store reassign order type $order_type") && isset($operations['reassign'])) {
        unset($operations['reassign']);
    }
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function commerce_more_tools_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'commerce_order') {
    return [
      'payment_state' => BaseFieldDefinition::create('list_string')
        ->setLabel(t('Payment state'))
        ->setDescription(t('Value to indicate about order payments status.'))
        ->setRequired(TRUE)
        ->setSettings([
          'allowed_values' => [
            'pending' => 'Payment pending',
            'partial' => 'Partially paid',
            'complete' => 'Complete',
            'overpaid' => 'Overpaid',
          ],
        ])
        ->setDefaultValue('pending')
        ->setDisplayOptions('view', [
          'label' => 'above',
          'type' => 'string',
        ])
        ->setDisplayOptions('form', [
          'region' => 'hidden',
          'type' => 'options_select',
        ])
        ->setDisplayConfigurable('form', TRUE)
        ->setDisplayConfigurable('view', TRUE),
    ];
  }
}

/**
 * Implements hook_entity_field_access().
 */
function commerce_more_tools_entity_field_access($operation, FieldDefinitionInterface $field_definition, $account, FieldItemListInterface $items = NULL) {
  if ($field_definition->getTargetEntityTypeId() == 'commerce_store' && $field_definition->getName() == 'uid' && $items && $store = $items->getEntity()) {
    $store_type = $store->bundle();
    if ($operation == 'edit' && $store->getOwnerId() == $account->id() && !$account->hasPermission("own store $store_type change owner")) {
      return AccessResult::forbidden();
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_entity_type_alter().
 *
 * @todo
 *   Check if some of previous hooks may be avoided, if using an alteration here.
 */
function commerce_more_tools_entity_type_alter(array &$entity_types) {
  $entity_types['commerce_store']->setFormClass('add', StoreForm::class);
  $entity_types['commerce_store']->setFormClass('edit', StoreForm::class);
  $entity_types['commerce_store']->setFormClass('default', StoreForm::class);
}
